<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>playerBox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>wallCollide</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dirVelo</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Offset
x+=8;
y+=8
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bobbing setup
bobMult = 0;
bobCount = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Player Vars
d3d_start();
d3d_set_culling(1);

flashItemGetMsg = false;
userCanExitMsg = false;

timerPunch = 0;
hasFired = false;

surf_UI = surface_create(160,120);

currentItem = 0;

global.wallColor = $FFFFFF
global.floorColor = $FFFFFF

headMode = 0;

global.mapStart = false;

isLoading = false;

mapGoto = 0;

switch (room)
    {
    case (startMap):
    direction = 90-20;
        break;
    case (dungeonMap):
    direction = 270;
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make it so user can exit out of message
userCanExitMsg = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>212</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>startPrison</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>212</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>startDungeon</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>212</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>startOverworld</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Goto map
switch (mapGoto)
{
    case(1):
    room_goto(dungeonMap);
        break;
    case(0):
    room_goto(startMap);
        break;
    case(2):
    room_goto(overworldMap);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interface
if (!surface_exists(surf_UI)) {
surf_UI = surface_create(160,120);
}

currentItem = clamp(currentItem,0,7);

switch (keyboard_key)
{
    case (ord("1")):
        currentItem=0;
        break;
    case (ord("2")):
        currentItem=1;
        break;
    case (ord("3")):
        currentItem=2;
        break;
    case (ord("4")):
        currentItem=3;
        break;
    case (ord("5")):
        currentItem=4;
        break;
    case (ord("6")):
        currentItem=5;
        break;
    case (ord("7")):
        currentItem=6;
        break;
    case (ord("8")):
        currentItem=7;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item use

var handHitRange = 16;

var chestHit = (collision_line_first(x,y,x+lengthdir_x(handHitRange/2,direction),y+lengthdir_y(handHitRange/2,direction),chestObject,1,playerObject));

if (!flashItemGetMsg)
{

if (!chestHit &amp;&amp; chestHit != -1) /* If player is not looking at any chests, use normal items */
{
switch (currentItem)
{
    case 0: /* POW Glove */
        if (keyboard_check_pressed(vk_space))
        {
        var objHit = (collision_line_first(x,y,x+lengthdir_x(handHitRange,direction),y+lengthdir_y(handHitRange,direction),wallBreakable,1,playerObject));
        if (objHit)
            {
            global.ObjectInteractableStatusX[objHit.x/16,global.currentRoom] = false;
            global.ObjectInteractableStatusY[objHit.y/16,global.currentRoom] = false;
            instance_destroy(objHit);
            audio_play_sound(crumble,0,0);
            }
        var objHit3 = (collision_line_first(x,y,x+lengthdir_x(handHitRange,direction),y+lengthdir_y(handHitRange,direction),wallBall,1,playerObject));
        if (objHit3)
            {
            if (global.hasPowerGlove)
                {
                objHit3.speed += 1;
                objHit3.direction = direction;
                audio_play_sound(roll,0,0);
                }
            }
        }
        break;
    case 3: /* Pliers */
        if (keyboard_check_pressed(vk_space))
        {
        var objHit2 = (collision_line_first(x,y,x+lengthdir_x(handHitRange,direction),y+lengthdir_y(handHitRange,direction),wallCellFront,1,playerObject));
        if (objHit2)
            {
            global.ObjectInteractableStatusX[objHit2.x/16,global.currentRoom] = false;
            global.ObjectInteractableStatusY[objHit2.y/16,global.currentRoom] = false;
            instance_create(objHit2.x,objHit2.y,wallCellFront_Broken);
            instance_destroy(objHit2);
            audio_play_sound(cut,0,0);
            }
        }
        break;
}
}

if (chestHit &amp;&amp; chestHit != -1) /* Open a chest if looking at one */
{
if (keyboard_check_pressed(vk_space))
    {
    if (!chestHit.isOpen) /* Only open if never opened */
        {
        
        if (chestHit.idoC == 3 &amp;&amp; room == dungeonMap)
        {
        global.hasPowerGlove = true;
        flashItemGetMsg = true;
        alarm_set(1,room_speed*2.5);
        }
        
        if (chestHit.idoC == 1 &amp;&amp; room == startMap)
        {
        global.hasGun = true;
        flashItemGetMsg = true;
        alarm_set(1,room_speed*2.5);
        }
        
        chestHit.isOpen = true;
        global.ObjectInteractableStatusX[(chestHit.x-8)/16,global.currentRoom] = false;
        global.ObjectInteractableStatusY[(chestHit.y-8)/16,global.currentRoom] = false;
        audio_play_sound(treasure,0,0);
        }
    }
}

} else 
{
    if (keyboard_check_pressed(vk_space))
    {
        if (userCanExitMsg)
        {
        flashItemGetMsg = false;
        userCanExitMsg = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

var movSpeed = 1.25;

global.playX = x;
global.playY = y;

/* Head Mode */

/*if headMode &lt; 1
{
headMode = 0;s
}

if keyboard_check_pressed(ord("H"))
{
headMode++;
}

switch (headMode)
{
    case (0):
    direction = direction;
        break;
    case (1):
    direction = round(direction/4)*4;
        break;
}*/

/* Looking Around */

if (!flashItemGetMsg)
{
dirVelo -= (keyboard_check(vk_left) - keyboard_check(vk_right)) * 2;
}

if (!keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right))
{
dirVelo = lerp(dirVelo,0,0.5);
}
dirVelo = clamp(dirVelo, -5, 5);
direction += dirVelo;

/* Movement */
var vert,horz;
vert = 0;
horz = 0;
if (!flashItemGetMsg)
{
vert = keyboard_check(ord("W"))-keyboard_check(ord("S"));
horz = keyboard_check(ord("A"))-keyboard_check(ord("D"));
}

if (vert != 0 || horz != 0)
{
bobCount += 0.375;
bobMult = lerp(bobMult,1,0.5);
} else { bobMult = lerp(bobMult,0,0.1); if (bobMult &lt;=0.05) {bobCount = 0;} }


var vertMovX, vertMovY;
vertMovX = lengthdir_x(vert*movSpeed,direction);
vertMovY = lengthdir_y(vert*movSpeed,direction);

var horzMovX, horzMovY;
horzMovX = lengthdir_x(horz*movSpeed,direction-90);
horzMovY = lengthdir_y(horz*movSpeed,direction-90);

if((!instance_place(x+vertMovX+horzMovX,y, wallCollide) &amp;&amp; !instance_place(x+vertMovX+horzMovX,y, wallInvis)) || keyboard_check(ord("Q")))
{
x+=vertMovX+horzMovX;
} else { x = xprevious };

if((!instance_place(x,y+vertMovY+horzMovY, wallCollide) &amp;&amp; !instance_place(x,y+vertMovY+horzMovY, wallInvis)) || keyboard_check(ord("Q")))
{
y+=vertMovY+horzMovY;
} else { y = yprevious };
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set wall and floor color
switch (room)
{
    case (startMap):
        global.wallColor = $E1CCB1;
        global.floorColor = $FFFFFF;
        break;
    case (dungeonMap):
        global.wallColor = $5448c6;
        global.floorColor = $51488d;
        break;
    case (overworldMap):
        global.floorColor = $51814e;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ladderUpObject">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>ladder</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prep going to next map
isLoading = true;

switch (room)
{
    case(startMap):
    mapGoto = 2;
    global.doesForceLocation = true;
    global.forceX = 37;
    global.forceY = 19;
    global.prisonBallsRemoved = true;
        break;
    case(dungeonMap):
    mapGoto = 0;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ladderDownObject">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>ladder</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prep going to next map
isLoading = true;

switch (room)
{
    case(startMap):
    mapGoto = 1;
        break;
    case(overworldMap):
        switch (other.idoL)
        {
        case 2:
            mapGoto = 0;
            global.doesForceLocation = true;
            global.forceX = 36;
            global.forceY = 31;
            break;
        default:
            mapGoto = 1;
            global.doesForceLocation = true;
            global.forceX = 42;
            global.forceY = 34;
            break;
    }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI
d3d_end();
/*
surface_set_target(surf_UI);
//draw_set_color($4a4a4a);
draw_set_color(c_ltgray);
draw_rectangle(0,92,320,320,0);
draw_set_color(c_gray);
//draw_set_color($252525);
draw_rectangle(30,93,158,109,0);

draw_set_color(c_black);
draw_rectangle(31,94,157,108,0);

//draw_set_color($252525);
draw_set_color(c_gray);
for (i = 0; i &lt; 8; i += 1)
{
draw_rectangle(30+(i*16),93,46+(i*16),109,true);
}
surface_reset_target();
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw screen

display_set_gui_size(160,120);
surface_resize(application_surface,160,120);

draw_set_color(c_black);
draw_rectangle(0,0,320,320,0);
draw_set_color(c_white);

var bob = ((abs(sin(bobCount/1.5)))/2) * bobMult;
var currFrame = 8;

draw_set_color(c_white);
if (!isLoading)
{
draw_surface_stretched(application_surface,0,0,160,91);

switch (currentItem)
{
case (0):

if (global.hasPowerGlove)
{
    if (keyboard_check_pressed(vk_space))
    {
    if (!flashItemGetMsg)
    {
    hasFired = true;
    }
    }
    if (hasFired)
    {
    timerPunch += 0.5;
    }
    if (timerPunch == 5)
    {
    timerPunch = 0;
    hasFired = false;
    }
    if (timerPunch &gt;= 1)
    {
    currFrame = 16;
    } else { currFrame = 8; }
        draw_sprite_ext(tiles_items,currFrame,(160/2)+(160/16)-(dirVelo*1.5),91-(16*3)+(bob*5),3,3,0,$63c3ff,1);
}

    break;
case (2):

if (global.hasGun)
{
    if (keyboard_check_pressed(vk_space))
    {
    if (!flashItemGetMsg)
    {
    hasFired = true;
    }
    }
    if (hasFired)
    {
    timerPunch += 1;
    }
    if (timerPunch == 5)
    {
    timerPunch = 0;
    hasFired = false;
    }
    if (timerPunch &gt;= 1)
    {
    currFrame = 17;
    } else { currFrame = 9; }
        draw_sprite_ext(tiles_items,currFrame,(160/2)+(160/16)-(dirVelo*1.5),91-(16*3)+(bob*5),3,3,0,$ffffff,1);
}

    break;

}

}
if (isLoading)
{
    switch (mapGoto)
    {
    case (0):
        draw_loading("Prison");
        break;
    case (1):
        draw_loading("Dungeons");
        break;
    default:
        draw_loading("MISSINGNO.");
        break;
    }
}
//draw_surface(surf_UI,0,0);
draw_sprite(uiBar,0,0,91);
draw_sprite(uiBar_Selected,0,30+(currentItem*16),93);

if (global.hasPowerGlove)
{
draw_sprite_ext(tiles_items,0,30,93,1,1,0,$63c3ff,1);
}

if (global.hasGun)
{
draw_sprite_ext(tiles_items,1,30+(16*2),93,1,1,0,$ffffff,1);
}

draw_text(10,94,global.playerKeys);
draw_text(10,102,global.playerCups);
draw_text(10,110,health);

if (keyboard_check(ord("M")))
{
/*
display_set_gui_size(320,240);

draw_sprite(global.roomName,0,320-64,0);
draw_sprite(playSprite_mini,0,round(((x)/16) + (320-64)),round((y)/16));

display_set_gui_size(160,120);
*/
}

/*
var tempStr = "Lacking downwards ladders"

if (instance_exists(ladderDownObject))
{
tempStr = "id:"+string(instance_nearest(x,y,ladderDownObject).idoL);
}

var tempStr2 = "#Lacking chests"

if (instance_exists(chestObject))
{
tempStr2 = "#id:"+string(instance_nearest(x,y,chestObject).idoC);
}

draw_text(0,0,"Does force loc?#" + string(global.doesForceLocation) + "#" + tempStr + tempStr2);
*/

if (flashItemGetMsg)
{

draw_set_alpha_test(false);

draw_set_alpha(0.5);
draw_set_color(c_black);
draw_rectangle(0,0,160,160,0);
draw_set_alpha(1);
draw_set_color(c_white);

draw_set_alpha_test(true);

draw_sprite_ext(tiles_items,0,56,8-3,3,3,0,$63c3ff,1);

draw_set_halign(fa_center);

draw_set_color($7effff);
draw_text(160/2,50,"You found the Power Glove!");
draw_set_color($9f9f9f);
draw_text(160/2,60,"Smaaaash!");

if (userCanExitMsg)
{
draw_set_color($7effff);
draw_text(160/2-6,80,"-&gt; Continue");
} else
{
draw_set_color($9f9f9f);
draw_text(160/2,80,"Continue");
}

}

draw_set_color(c_white);
draw_set_halign(fa_left);

d3d_start();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set projection
if (global.mapIsGen == true)
{
d3d_start();
d3d_set_fog(1, c_black, -8, 90);

d3d_light_enable(0, true);
d3d_light_enable(1, true);
}

var bob = ((abs(sin(bobCount)+1)-1)/2) * bobMult;

var height = 6;

var res = 160/91

d3d_set_projection_ext(x,y,height+bob,x+lengthdir_x(9999,direction),y+lengthdir_y(9999,direction),height+bob,0,0,-1,70,res,0.1,256);

draw_set_alpha_test(true);
draw_set_alpha_test_ref_value(128);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>wallMain</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Flooring
draw_set_color(global.floorColor);

switch (room)
{
default:
texture = sprite_get_texture(tiles_Floor,0);
break;
case (overworldMap):
texture = sprite_get_texture(tiles_Floor,24);
break;
}

d3d_set_culling(0);

d3d_draw_floor(0,0,16,room_width,room_height,16,texture,64,64);

if (room != overworldMap)
{
d3d_draw_floor(0,0,0,room_width,room_height,0,texture,64,64);
}

d3d_set_culling(1);
draw_set_color($FFFFFF);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>wallMain</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw WallMain
texture = sprite_get_texture(tiles_Wall,0);

draw_set_color(global.wallColor);

d3d_draw_shaded_box(x,y,0,x+16,y+16,16,texture,1,1);

draw_set_color($FFFFFF);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>wallFoliage</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw WallFoliage
texture = sprite_get_texture(tiles_Wall,8);

draw_set_color($33ae2ad);

d3d_draw_shaded_box(x,y,0,x+16,y+16,16,texture,1,1);

draw_set_color($FFFFFF);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>wallBreakable</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw WallBreakable
texture = sprite_get_texture(tiles_Wall,1);

draw_set_color(global.wallColor);

d3d_draw_shaded_box(x,y,0,x+16,y+16,16,texture,1,1);

draw_set_color($FFFFFF);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>wallCellFront</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw CellWall
d3d_set_culling(0);

texture = sprite_get_texture(tiles_Sprites,0);

d3d_transform_set_identity();

d3d_transform_set_rotation_z(playerObject.direction);
d3d_transform_add_translation(x+8,y+8,0);

d3d_draw_wall(0,-8,0,0,8,16,texture,1,1);

d3d_transform_set_identity();

d3d_set_culling(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>chestObject</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Chest
d3d_set_culling(0);

draw_set_color($00ffff);

if (isOpen)
{
texture = sprite_get_texture(tiles_Sprites,17);
} else
{
texture = sprite_get_texture(tiles_Sprites,16);
}

d3d_transform_set_identity();

d3d_transform_set_rotation_z(playerObject.direction);
d3d_transform_add_translation(x,y,0);

d3d_draw_wall(0,-8,0,0,8,16,texture,1,1);

d3d_transform_set_identity();

draw_set_color($FFFFFF);

d3d_set_culling(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>wallBall</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Ball
d3d_set_culling(0);

draw_set_color($93a2ae);

texture = sprite_get_texture(tiles_Sprites,8 + round(currFrame));

d3d_transform_set_identity();

d3d_transform_set_rotation_z(playerObject.direction);
d3d_transform_add_translation(x,y,0);

d3d_draw_wall(0,-8,0,0,8,16,texture,1,1);

d3d_transform_set_identity();

d3d_set_culling(1);

draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>wallCellFront_Broken</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw CellWall_Broken
d3d_set_culling(0);

texture = sprite_get_texture(tiles_Sprites,1);

d3d_transform_set_identity();

d3d_transform_set_rotation_z(playerObject.direction);
d3d_transform_add_translation(x+8,y+8,0);

d3d_draw_wall(0,-8,0,0,8,16,texture,1,1);

d3d_transform_set_identity();

d3d_set_culling(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>partDerbis</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw partDerbis
d3d_set_culling(0);

draw_set_color(global.wallColor);

texture = sprite_get_texture(tiles_Sprites,2);

d3d_transform_set_identity();

d3d_transform_set_rotation_z(playerObject.direction);
d3d_transform_add_translation(x+15,y+15,z);

d3d_draw_wall(0,-8,-8,0,8,8,texture,1,1);

d3d_transform_set_identity();

d3d_set_culling(1);

draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>floorWater</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw floorWater
d3d_set_culling(0);

draw_set_color($f00000);

textureF = sprite_get_texture(tiles_Floor,8 + round(currFrame));

d3d_draw_floor(x,y,15.985,x+16,y+16,15.985,textureF,1,1);

d3d_set_culling(1);

draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>ladderDownObject</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw ladderDownObject
d3d_set_culling(0);

draw_set_color(global.floorColor);

texture = sprite_get_texture(tiles_Sprites,11);
textureF = sprite_get_texture(tiles_Floor,1);

d3d_draw_floor(x,y,15.985,x+16,y+16,15.985,textureF,1,1);

draw_set_color($518ddb);

d3d_transform_set_identity();

d3d_transform_set_rotation_z(playerObject.direction);
d3d_transform_add_translation(x+8,y+8,0);

d3d_draw_wall(0,-8,0,0,8,16,texture,1,1);

d3d_transform_set_identity();

d3d_set_culling(1);

draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>ladderUpObject</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw ladderUpObject
d3d_set_culling(0);

draw_set_color(global.floorColor);

texture = sprite_get_texture(tiles_Sprites,12);
textureF = sprite_get_texture(tiles_Floor,1);

d3d_draw_floor(x,y,0.01,x+16,y+16,0.01,textureF,1,1);

draw_set_color($518ddb);

d3d_transform_set_identity();

d3d_transform_set_rotation_z(playerObject.direction);
d3d_transform_add_translation(x+8,y+8,0);

d3d_draw_wall(0,-8,0,0,8,16,texture,1,1);

d3d_transform_set_identity();

d3d_set_culling(1);

draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>floorHole_ForBalls</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw hole for balls
d3d_set_culling(0);

draw_set_color(global.floorColor);

texture = sprite_get_texture(tiles_Sprites,10);
textureF = sprite_get_texture(tiles_Floor,1);

d3d_draw_floor(x,y,15.99,x+16,y+16,15.99,textureF,1,1);

if (hasBall)
{
draw_set_color($93a2ae);

d3d_transform_set_identity();

d3d_transform_set_rotation_z(playerObject.direction);
d3d_transform_add_translation(x+8,y+8,0);

d3d_draw_wall(0,-8,0,0,8,16,texture,1,1);

d3d_transform_set_identity();
}

d3d_set_culling(1);
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>torchObject</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw torchObject

if (global.mapIsGen)
{

draw_set_color($00FFFF);

d3d_set_fog(1, c_black, 0, 128);

d3d_set_culling(0);

texture = sprite_get_texture(tiles_Sprites,3+round(startFrame));

d3d_transform_set_identity();

d3d_transform_set_rotation_z(playerObject.direction);

d3d_transform_add_translation(x+8,y+8,0);

if (instance_position(x-4,y,wallMain))
{
d3d_transform_add_translation(-6,0,0);
}
if (instance_position(x+16,y,wallMain))
{
d3d_transform_add_translation(6,0,0);
}

if (instance_position(x,y-4,wallMain))
{
d3d_transform_add_translation(0,-6,0);
}
if (instance_position(x,y+16,wallMain))
{
d3d_transform_add_translation(0,6,0);
}

d3d_draw_wall(0,-8,0,0,8,16,texture,1,1);

d3d_transform_set_identity();

d3d_set_culling(1);

d3d_set_fog(1, c_black, -8, 90);

draw_set_color($FFFFFF);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
